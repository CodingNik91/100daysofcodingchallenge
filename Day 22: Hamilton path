/*
Hamiltonian Path


A Hamiltonian path, is a path in an undirected graph that visits each vertex exactly once. Given an undirected graph, the task is to check if a Hamiltonian path is present in it or not.

Example 1:

Input:
N = 4, M = 4
Edges[][]= { {1,2}, {2,3}, {3,4}, {2,4} }
Output:
1 
Explanation: 
There is a hamiltonian path: 
1 -> 2 -> 3 -> 4 
Example 2:

Input:
N = 4, M = 3 
Edges[][] = { {1,2}, {2,3}, {2,4} } 
Output: 
0 
Explanation: 
It can be proved that there is no 
hamiltonian path in the given graph
Your task:
You don't need to read input or print anything. Your task is to complete the function check() which takes the N (the number of vertices), M (Number of edges) and the list of Edges[][] (where Edges[i] denotes the undirected Edge between vertices Edge[i][0] and Edges[i][1] ) as input parameter and returns true (boolean value) if the graph contains Hamiltonian path,otherwise returns false. 


Expected Time Complexity: O(N!).
Expected Auxiliary Space: O(N+M).


Constraints:
1 ≤ N ≤ 10
1 ≤ M ≤ 15
Size of Edges[i] is 2
1 ≤ Edges[i][0],Edges[i][1] ≤ N
*/

//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*; 
class GFG{
    public static void main(String args[]) throws IOException { 
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        
        while(t-- > 0){
            String input_line[] = read.readLine().trim().split("\\s+");
            int N = Integer.parseInt(input_line[0]);
            int M = Integer.parseInt(input_line[1]);
            
            input_line = read.readLine().trim().split("\\s+");
            ArrayList<ArrayList<Integer>> Edges = new ArrayList<ArrayList<Integer>>(); 
            for(int i = 0; i < M; i++){
                ArrayList<Integer> e = new ArrayList<Integer>();
                e.add(Integer.parseInt(input_line[2*i]));
                e.add(Integer.parseInt(input_line[2*i+1]));
                Edges.add(e);
            }
            Solution ob = new Solution();
            if(ob.check(N, M, Edges)){
                System.out.println(1);
            }
            else{
                System.out.println(0);
            }
        }
    } 
} 
// } Driver Code Ends



//User function Template for Java
class Solution {
    public static int[][] printAdjacency(int n, int m, int[][] edges) {

        // n - > number of nodes
        // m - > number of edges
        // adjacence list of type - for node 0 - the list is 1 ,4 5, 6 and not 0 , 1 , 4 ,5,6
        int[][] adjlist = new int[n][];
        ArrayList<Integer>[] arraylist = new ArrayList[n];

        for (int i = 0; i < n; i++) {
            arraylist[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            arraylist[edges[i][0]].add(edges[i][1]);
            arraylist[edges[i][1]].add(edges[i][0]);
        }

        for (int i = 0; i < n; i++) {
            int temp[] = new int[arraylist[i].size()];
            //temp[0] = i;

            arraylist[i].sort(Comparator.naturalOrder());
            for (int j = 0; j < arraylist[i].size(); j++) {
                temp[j] = arraylist[i].get(j);
            }

            adjlist[i] = temp;
        }

        return adjlist;
    }

    boolean meth(int N, int cur, int[][] adjlist, boolean[] visited, int count) {
        visited[cur] = true;
        count++;
    
        if (N == count) {
            return true;
        }
        for (int i = 0; i < adjlist[cur].length; i++) {
            if (!visited[adjlist[cur][i]]) {

             
                if (meth(N, adjlist[cur][i], adjlist, visited, count)) {
                   
                    return true;
                }
            }
        }
        visited[cur] = false;
        

        return false;

    }

    boolean check(int N, int M, ArrayList<ArrayList<Integer>> Edges) {
        // code here
        int count = 0;
        boolean[] visited = new boolean[N + 1];

        int[][] edges = new int[Edges.size()][];
        for (int i = 0; i < Edges.size(); i++) {
            int[] temp = new int[Edges.get(i).size()];
            for (int j = 0; j < Edges.get(i).size(); j++) {
                temp[j] = Edges.get(i).get(j);
            }
            edges[i] = temp;
        }
        int[][] adjlist = printAdjacency(N + 1, M, edges);

        for (int i = 1; i <= N; i++) {
            if (
                    meth(N , i, adjlist, visited, count)) return true;

        }


        return false;
    }
}
