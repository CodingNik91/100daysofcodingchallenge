/*
Example 1:

Input: N = 10
Output: 1
Explanation: Closest prime to 10 is 11.
Example 2:

Input: N = 7
Output: 0
Explanation: Closest prime to 7 is 7.
 
*/


//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int N = Integer.parseInt(br.readLine().trim());
            Solution ob = new Solution();
            int ans = ob.NthTerm(N);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    public int NthTerm(int N)
    {
       if (N == 1) return 1;
        if (N == 2) return 0;
        if (isprime(N)) {
            return 0;
        } 
        else {
            return findDiff(fcprime(N), N);
        }
    }
   public static boolean isprime(int n){
        if(n==1){
            return false;
        }
        else if(n==2 || n==3){
            return true;
        }
        else if(n%2==0 || n%3==0){
            return false;
        }
        else{
            for(int i=5;i<=Math.sqrt(n);i+=6){
                if(n%(i)==0 || n%(i+2)==0){
                    return false;
                }
            }
            return true;
        }
    }
    public static int fcprime(int number) {
        int incremented = number;
        int decremented = number;
        while (true) {
            if (isprime(++incremented)) {
                return incremented;
            }
            if (isprime(--decremented)) {
                return decremented;
            }
        }
    }
    public static int findDiff(int first, int second) {
        if (first > second) {
            return first - second;
        } else return second - first;
    }
        
 }
 
 
