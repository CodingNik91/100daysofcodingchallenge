/*
Shortest Path by Removing K walls

Given a 2-D binary matrix of size n*m, where 0 represents an empty space while 1 represents a wall you cannot walk through. You are also given an integer k.
You can walk up, down, left, or right. Given that you can remove up to k walls, return the minimum number of steps to walk from the top left corner (0, 0) to the bottom right corner (n-1, m-1).
Note: If there is no way to walk from the top left corner to the bottom right corner, return -1.


Example 1:

Input: n = 3, m = 3, k = 1
mat = {{0, 0, 0},
       {0, 0, 1},
       {0, 1, 0}}
Output:
4
Explanation:
We can remove any one of the walls and
reach the bottom in 4 moves.  
Example 2:

Input:
n = 2, m = 2, k = 0
mat[] = {{0, 1},
         {1, 0}}
Output:
-1
Explanation:
There's no way of reaching the bottom
corner without removing any walls.

Your Task:
The task is to complete the function shotestPath() which takes three integers n, m, and k and also a matrix of size n*m as input and returns the minimum number of steps to walk from the top left corner to the bottom right corner.


Constraints:
1 ≤ n,m ≤ 50
0 ≤ k ≤ n*m
Top left and bottom right corners doesn't have 1
*/

//{ Driver Code Starts
//Initial Template for JAVA

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            
            String St[] = read.readLine().split(" ");
            
            int n = Integer.parseInt(St[0]);
            int m = Integer.parseInt(St[1]);
            int k = Integer.parseInt(St[2]);
            
            int[][] mat = new int[n][m];
            
            for(int i=0; i<n; i++)
            {
                String S[] = read.readLine().split(" ");
                for(int j=0; j<m; j++)
                    mat[i][j] = Integer.parseInt(S[j]);
            }

            Solution ob = new Solution();
            System.out.println(ob.shotestPath(mat,n,m,k));
        }
    }
}
// } Driver Code Ends




//User function Template for 


class Solution {
    public static final int[] dirX = {-1,1,0,0};
    public static final int[] dirY = {0,0,-1,1};
    public static final int DIRS = 4;
    static int shotestPath(int[][] mat, int n, int m, int k) {
        boolean[][][] vis = new boolean[n][m][k+1];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0,0,0,k});
        vis[0][0][k] = true;
        while(!queue.isEmpty()){
            int[] curPos = queue.poll();
            if(curPos[0] == n-1 && curPos[1] == m-1){
                return curPos[2];
            }
            for(int dir = 0;dir<DIRS;dir++){
                int newX = curPos[0] + dirX[dir];
                int newY = curPos[1] + dirY[dir];
                int newK = curPos[3];
                if(!isSafe(newX,newY,n,m)){
                    continue;
                }
                if(mat[newX][newY] == 0 && !vis[newX][newY][newK]){
                    queue.add(new int[]{newX,newY,curPos[2]+1,newK});
                    vis[newX][newY][newK] = true;
                }
                else if(newK > 0 && !vis[newX][newY][newK-1]){
                    queue.add(new int[]{newX,newY,curPos[2]+1, newK-1});
                    vis[newX][newY][newK-1] = true;
                }
            }
            
        }
        return -1;
    }
    static boolean isSafe(int x,int y,int n,int m){
        return (x>=0 && x<n && y>=0 && y<m);
    }
};
