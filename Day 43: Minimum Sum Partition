/*
Minimum sum partition

Lamp
This problem is part of GFG SDE Sheet. Click here to view more.  

Given an array arr of size n containing non-negative integers, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the minimum difference


Example 1:

Input: N = 4, arr[] = {1, 6, 11, 5} 
Output: 1
Explanation: 
Subset1 = {1, 5, 6}, sum of Subset1 = 12 
Subset2 = {11}, sum of Subset2 = 11   
Example 2:
Input: N = 2, arr[] = {1, 4}
Output: 3
Explanation: 
Subset1 = {1}, sum of Subset1 = 1
Subset2 = {4}, sum of Subset2 = 4

Your Task:  
You don't need to read input or print anything. Complete the function minDifference() which takes N and array arr as input parameters and returns the integer value


Expected Time Complexity: O(N*|sum of array elements|)
Expected Auxiliary Space: O(N*|sum of array elements|)


Constraints:
1 ≤ N*|sum of array elements| ≤ 106
0 < arr[i] <= 105
*/



//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n = sc.nextInt();
                    int A[] = new int[n];
                    for(int i = 0;i<n;i++)
                        A[i] = sc.nextInt();
                    Solution ob = new Solution();
                    System.out.println(ob.minDifference(A,n));
                }
        }
}    
// } Driver Code Ends


class Solution
{

	public int minDifference(int arr[], int n) 
	{ 
	        int sum=0;
        for(int i:arr) sum+=i;
        int dp[][]=new int[n+1][sum+1];
        for(int[] a:dp)
            Arrays.fill(a,-1);
        return min(0,0,0,arr,n,dp);
	}
	
	 int min(int i,int s1,int s2, int arr[],int n,int dp[][]){
        if(i==n){
            return Math.abs(s1-s2);
        }
        if(dp[i][Math.abs(s1-s2)]!=-1) return dp[i][Math.abs(s1-s2)];
        int a= min(i+1,s1+arr[i],s2,arr,n,dp);
        int b=min(i+1,s1,s2+arr[i],arr,n,dp);
        return dp[i][Math.abs(s1-s2)]=Math.min(a,b);
	} 
}
