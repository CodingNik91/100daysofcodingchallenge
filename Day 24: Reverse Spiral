/*
Reverse Spiral Form of Matrix
MediumAccuracy: 74.91%Submissions: 681Points: 4
Given a matrix as 2D array. Find the reverse spiral traversal of the matrix. 

Example 1:

Input: R = 3, C = 3
  a = {{9, 8, 7},
       {6, 5, 4},
       {3, 2, 1}}
Output: 5 6 3 2 1 4 7 8 9
Explanation: Spiral form of the matrix
in reverse order starts from the centre 
and goes outward.


Example 2:

Input: R = 4, C = 4 
  a = {{1, 2, 3, 4},
       {5, 6, 7, 8},
       {9, 10, 11, 12}, 
       {13, 14, 15, 16}}
Output: 10 11 7 6 5 9 13 14 15 16 12 8 4 3 2 1
Explanation: 


Your Task:  
You dont need to read input or print anything. Complete the function reverseSpiral() which takes R, C and a as input parameters and returns the matrix in reverse spiral form.

Expected Time Complexity: O(R*C)
Expected Auxiliary Space: O(R*C)

Constraints:
1 <= R,C <=100
1 <= a[R][C] <=100


*/


Code....

//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String[] input = new String[2]; 
            input = read.readLine().split(" "); 
            int R = Integer.parseInt(input[0]); 
            int C = Integer.parseInt(input[1]); 
            String s1[] = read.readLine().trim().split("\\s+");
            int a[][] = new int[R][C];
            for(int i = 0;i < R*C;i++)
                a[i/C][i%C] = Integer.parseInt(s1[i]);
            Solution ob = new Solution();
            int[] ans = ob.reverseSpiral(R,C,a);
            for(int i = 0; i < ans.length; i++)
            {
                System.out.print(ans[i] + " ");
            }
            System.out.println();
        }
    }
}
// } Driver Code Ends



//User function Template for Java
class Solution
{
    public int[] reverseSpiral(int R, int C, int[][] a)
    {
        // code here
        int [] result = new int[R*C];

        int k=0;

        int R1= 0, R2= R-1, C1= 0, C2= C-1;

     

        while(R1<=R2 &&  C1<=C2){

            for(int i=C1; i<=C2; i++) {

                result[k] = a[R1][i];

                k++;

            }

            R1++;

           

            for(int i=R1; i<=R2; i++){

                result[k] = a[i][C2];

                k++; 

            }

            C2--;

            

            if(R1 <= R2){

                for(int i=C2; i>=C1; i--){

                    result[k] = a[R2][i];

                    k++; 

                }

                R2--;

            }

            if(C1<=C2){

                for(int i=R2; i>=R1; i--){

                    result[k] = a[i][C1];

                    k++;

                }

                 C1++;

            }

        }

        int i=0, j=result.length-1;

        while(i<j){

            int temp = result[i];

            result[i] = result[j];

            result[j] = temp;

            i++;

            j--;

        }

        return result;
    }
}
