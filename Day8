/*
Geek has a list Li containing (not necessarily distinct) N words and Q queries. Each query consists of a string x. For each query, find how many strings in the List Li has the string x as its prefix. 


Example 1:

Input: 
N = 5, Q = 5
li[] = {'abracadabra', 'geeksforgeeks', 
      'abracadabra', 'geeks', 'geeksthrill'}
query[] = {'abr', 'geeks', 'geeksforgeeks', 
         'ge', 'gar'}

Output: 2 3 1 3 0

Explaination: 
Query 1: The string 'abr' is prefix of 
two 'abracadabra'. 
Query 2: The string 'geeks' is prefix of three 
strings 'geeksforgeeks', 'geeks' and 'geeksthrill'. 
Query 3: The string 'geeksforgeeks' is prefix 
of itself present in li. 
Query 4: The string 'ge' also is prefix of three 
strings 'geeksforgeeeks', 'geeks', 'geeksthrill'. 
Query 5: The string 'gar' is not a prefix of any 
string in li.

Your Task:
You do not need to read input or print anything. Your task is to complete the function prefixCount() which takes N, Q, li[] and query[] as input parameters and returns a list containing the count of prefixes for each query. 


Expected Time Complexity: O(Q*x) + O(N*L) Where Q is the number of queries, x is the longest word in the query, N = number of words inserted in Trie and L = length of longest word inserted in Trie.
Expected Auxiliary Space: O(N*List [i])
*/
//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            int N = Integer.parseInt(in.readLine());
            String li[] = new String[N];
            for(int i=0; i<N; i++)
                li[i] = in.readLine();
            int Q = Integer.parseInt(in.readLine());
            String query[] = new String[Q];
            for(int i=0; i<Q; i++)
                query[i] = in.readLine();
            
            Solution ob = new Solution();
            List<Integer> ans = new ArrayList<Integer>();
            ans = ob.prefixCount(N, Q, li, query);
            for(int i = 0;i < ans.size();i++)
                System.out.println(ans.get(i));
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution{
    static List<Integer> prefixCount(int N, int Q, String li[], String query[])
    {
        List<Integer> ans = new ArrayList<>();
        HashMap<String , Integer> hm = new HashMap<>();
        for(int i=0;i<N;i++){
            String str = "";
            for(int j=0;j<li[i].length();j++){
                str += li[i].charAt(j);
                hm.put(str , hm.getOrDefault(str , 0)+1);    
            }
        }
        for(String s : query){
            ans.add(hm.getOrDefault(s , 0));
        }
        return ans;

    }
}
